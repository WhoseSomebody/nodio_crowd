#!/usr/bin/env node

/**
 * Module dependencies.
 */
var certificate = '-----BEGIN CERTIFICATE-----MIIFPzCCBCegAwIBAgIQR5AF1a5QFDyMbrbzClm0DzANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxNjA0BgNVBAMTLUNPTU9ETyBSU0EgRG9tYWluIFZhbGlkYXRpb24gU2VjdXJlIFNlcnZlciBDQTAeFw0xNjA5MTIwMDAwMDBaFw0xNzA5MTIyMzU5NTlaME0xITAfBgNVBAsTGERvbWFpbiBDb250cm9sIFZhbGlkYXRlZDEUMBIGA1UECxMLUG9zaXRpdmVTU0wxEjAQBgNVBAMTCW5vZGlvLm5ldDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMwrDRJAAYCuYyu+pixPlklT910thQMrDYvt/j9klgO0udEQsitSBHyV7ozRkT2Zl4vvMQkR7IP6TAgXK7zAepgrcLg8BdW1ZVIyrA8k6dZqGsFOSA0Gbhu/FJUScr3++tq6ijsMfSw0zXVvyIfpyO/KeHm8jMSh/+LnEsYl2JpZIVWwkxQsd1xQIDfPkOyXfwsKmqR4EINBSXan1XladoJz6kPEi9tYPLCr+cf7+E+cZOERwQY4bL9CSv2lA7TYYf18Q6JDZYxAT/JXVr+oyEFZz9qc/bhvg0nDi48d/0Po15xoRR3lD7nJ1bCZSW33rsH4aj1tlwEzEnVD+SZJxLsCAwEAAaOCAdUwggHRMB8GA1UdIwQYMBaAFJCvajqUWgvYkOoSVnPfQ7Q6KNrnMB0GA1UdDgQWBBRTxptXMGJXWWDcYHHX5eGunqgy5DAOBgNVHQ8BAf8EBAMCBaAwDAYDVR0TAQH/BAIwADAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwTwYDVR0gBEgwRjA6BgsrBgEEAbIxAQICBzArMCkGCCsGAQUFBwIBFh1odHRwczovL3NlY3VyZS5jb21vZG8uY29tL0NQUzAIBgZngQwBAgEwVAYDVR0fBE0wSzBJoEegRYZDaHR0cDovL2NybC5jb21vZG9jYS5jb20vQ09NT0RPUlNBRG9tYWluVmFsaWRhdGlvblNlY3VyZVNlcnZlckNBLmNybDCBhQYIKwYBBQUHAQEEeTB3ME8GCCsGAQUFBzAChkNodHRwOi8vY3J0LmNvbW9kb2NhLmNvbS9DT01PRE9SU0FEb21haW5WYWxpZGF0aW9uU2VjdXJlU2VydmVyQ0EuY3J0MCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5jb21vZG9jYS5jb20wIwYDVR0RBBwwGoIJbm9kaW8ubmV0gg13d3cubm9kaW8ubmV0MA0GCSqGSIb3DQEBCwUAA4IBAQCDw2DIM91ao9p/OrK+ieMfeD8Jb2IRSpUgnl3nSJNokEluTCvpftvfgatw9OSlcBPfmkWdojO6cklsLh0TCDXRujLmnYVzMU6UlkYtUNdJ1G8GkzkOM8h6/KrhM7zKQzX1U5o52ofYbpWur7SAHqVmvFDNbee3zfoqIdWDmDmKeW7/4y06drhnKixXdvUIsE2ysL4a2EyZSxs3+ovTJnZZ3FfDerXF5ajzqB4bRSO9kfjwhfhPtr7YmudpgEUske+wrqCYJIktVXVNXEQrFgBBJhDvUA4TbZLn4bKAwRYBRlMwiRZnRQjul6GerXXKS/PyzDDe2rERkVoXQvtcNz8b-----END CERTIFICATE-----';
var privKey = '-----BEGIN RSA PRIVATE KEY-----MIIEowIBAAKCAQEAzCsNEkABgK5jK76mLE+WSVP3XS2FAysNi+3+P2SWA7S50RCyK1IEfJXujNGRPZmXi+8xCRHsg/pMCBcrvMB6mCtwuDwF1bVlUjKsDyTp1moawU5IDQZuG78UlRJyvf762rqKOwx9LDTNdW/Ih+nI78p4ebyMxKH/4ucSxiXYmlkhVbCTFCx3XFAgN8+Q7Jd/CwqapHgQg0FJdqfVeVp2gnPqQ8SL21g8sKv5x/v4T5xk4RHBBjhsv0JK/aUDtNhh/XxDokNljEBP8ldWv6jIQVnP2pz9uG+DScOLjx3/Q+jXnGhFHeUPucnVsJlJbfeuwfhqPW2XATMSdUP5JknEuwIDAQABAoIBABsM3Sd82XYeJL+H++ZFCSlf+Zcbz9KyopHWj2gAwKtvB2t+pcx9imCjUL7RiUe7EMwWfc2w1UBLKkWsJDxW2CdPIhkWwsMkzG7OjeNXxa+F0VOpNnybTH1anLR/hDpODRhrvKLELdVsjYgwrkXroJa8oaenZpMqz4dVjDQ6kW8pgRwU/+YxyR2i9ycsvqv3XfSnP1zQoiXRZ3Av7msh3eGIfuf6IpCxDlKUVOcavM2qjn6Rvm9PxJVII77syFTTn4oTnicqhaMYyAAje4sEWg9VyB4WdjchN2ey2M7OWNP4WiEacQEPks8z9oM7FMJDELdP+T+jDjm6WQw+NoW6CkkCgYEA+vQjwgcEWpR0y9xhN+IAQqcBUVgVCmP/gje9EQSK7++bm5gG5YQgW6fyJDF+4aYKERJFWw2+in/g3nq2SZQMWYo3c3fE/C4Qx8Cvd9Rv/dfsHd9E4yXGw8+hYaD825ac9DwpaZTIPLmJUMG5FFzgLWqO0t6U7ENp+wk56YXCSfUCgYEA0EYRm65/E+xiOFCVmBWWNNAk4cCq3/U6QKsbwAgv7zJWGQ6Yg8q2xeQeTD5f9k7Ie5OW+aYYTGn91G/P4WGhmKjz2KnXCwEgFIFkio20hzM20HEF1muj/EX4hN2dTXluQycIKeLmhULcULaTUPKNfxbxSNbr1bvaKzAIrqjbNe8CgYAGpcDsutLas2QEomnQ2SO4oEPgq7yi8dMq198iPESR5n7wuC42ljFlPCWl38nEoGlT2nAL4WlSseB7BDUf7dQF6ytc26dUJsQ7BlefjPkKeFXA1NE2UyHYvf9AXstT5cFylsViDpbfROrmQLtuVqd5jIEMBOlc+Mwt4iiujuR+oQKBgDQsKUMHbjvubhhPT3n+hlcKgQKwQd3CT2pdsqDjLCbORDUYq+nvwONHprNQuLc5uw0BxsMY8WNK9dPegoOh8loMkLEIsp7GFGQumaH/p2Zq1ONYPK8e3cBXQs79uObscUuPHoNnnHlra0coxTR03i8k7yJg/EjZOuiwqqweDnOvAoGBAMino5j5RceXDHFVWpq0T32UbGa8ao8QzU8P8+kMKWaQQ58NQvreo8niVdTLvBxV5KwpMeG8lUjD3cy+EPaJ9D+HHJitMr47M/RTnmlbNMfDHW9SRsqemr73eVLVOiVgqE9x/O5felzs009aLNvhUeiaGadbL7XgozPmd4QieYKM-----END RSA PRIVATE KEY-----';

var app = require('../app');
var debug = require('debug')('nodio-crow:server');
var http = require('http');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */


var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
